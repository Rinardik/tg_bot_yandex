from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup
import keyboard as kb
import db
from handlers.orders import notify_manager_about_order
import logging

logger = logging.getLogger(__name__)
router = Router()


async def show_basket_after_edit(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤.
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å), –æ–ø–∏—Å–∞–Ω–∏–µ–º, —Ü–µ–Ω–æ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º.
    """
    user_id = callback.from_user.id
    basket = db.get_user_basket(user_id)
    if not basket:
        await callback.message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return
    total_price = 0
    for product_id_str, quantity in basket.items():
        try:
            product_id = int(product_id_str)
        except ValueError:
            logger.error(f"[show_basket_after_edit] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ç–æ–≤–∞—Ä–∞: {product_id_str}")
            continue
        product = db.get_product_by_id(product_id)
        if not product:
            logger.warning(f"[show_basket_after_edit] –¢–æ–≤–∞—Ä #{product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            continue
        pid, name, photo, description, price, category_id, subcategory_id, available = product
        item_total = price * quantity
        total_price += item_total
        caption = (
            f"<b>{name}</b>\n\n"
            f"{description}\n\n"
            f"üì¶ –°—Ç–∞—Ç—É—Å: {'‚úÖ –í –Ω–∞–ª–∏—á–∏–∏' if available else '‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}\n"
            f"üí∞ –¶–µ–Ω–∞: {price} —Ä—É–±.\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
            f"üßÆ –ò—Ç–æ–≥–æ: {item_total} —Ä—É–±."
        )
        if photo and isinstance(photo, str):
            await callback.message.answer_photo(
                photo=photo,
                caption=caption,
                parse_mode="HTML",
                reply_markup=kb.get_basket_item_keyboard(pid)
            )
        else:
            await callback.message.answer(
                caption,
                parse_mode="HTML",
                reply_markup=kb.get_basket_item_keyboard(pid)
            )
    await callback.message.answer(f"üßÆ –û–±—â–∞—è —Å—É–º–º–∞: <b>{total_price} —Ä—É–±.</b>", parse_mode="HTML")


@router.callback_query(F.data.startswith("add_"))
async def add_to_cart(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É'.
    –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ.
    """
    try:
        if callback.data.startswith("add_category_") or callback.data.startswith("add_subcategory_"):
            await callback.answer("‚ö† –≠—Ç–æ –Ω–µ —Ç–æ–≤–∞—Ä –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã.")
            return
        parts = callback.data.split("_")
        if len(parts) < 2 or not parts[1].isdigit():
            await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return
        product_id = int(parts[1])
        user_id = callback.from_user.id
        basket = db.get_user_basket(user_id)
        key = str(product_id)
        basket[key] = basket.get(key, 0) + 1
        db.update_user_basket(user_id, basket)
        await callback.message.answer(f"‚úÖ –¢–æ–≤–∞—Ä #{product_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.")
        await show_basket_after_edit(callback)
        await callback.answer()
    except Exception as e:
        logger.error(f"[add_to_cart] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}", exc_info=True)


@router.callback_query(F.data.startswith("remove_one_"))
async def remove_one_from_cart(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–±—Ä–∞—Ç—å –æ–¥–∏–Ω'.
    –£–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–∞ 1, –∞ –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è 0 - —É–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä.
    """
    try:
        parts = callback.data.split("_")
        if len(parts) < 3 or not parts[2].isdigit():
            await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return
        product_id = int(parts[2])
        user_id = callback.from_user.id
        basket = db.get_user_basket(user_id)
        key = str(product_id)
        if key in basket:
            if basket[key] > 1:
                basket[key] -= 1
                message_text = f"‚ûñ –¢–æ–≤–∞—Ä #{product_id} —É–º–µ–Ω—å—à–µ–Ω –¥–æ {basket[key]} —à—Ç."
            else:
                del basket[key]
                message_text = f"üóë –¢–æ–≤–∞—Ä #{product_id} —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã." 
            db.update_user_basket(user_id, basket)
            await callback.message.answer(message_text)
            await show_basket_after_edit(callback)
        else:
            await callback.answer("‚ùå –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ.")
            
        await callback.answer()
    except Exception as e:
        logger.error(f"[remove_one_from_cart] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

    
@router.callback_query(F.data == "view_basket")
async def view_basket(callback: CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        await show_basket_after_edit(callback)
        await callback.answer()
    except Exception as e:
        logger.error(f"[view_basket] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}", exc_info=True)


@router.callback_query(F.data.startswith("remove_all_"))
async def remove_all_from_cart(callback: CallbackQuery):
    """
    –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ –µ–≥–æ ID.
    """
    try:
        product_id = int(callback.data.split("_")[2])
    except (IndexError, ValueError):
        await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return
    user_id = callback.from_user.id
    basket = db.get_user_basket(user_id)
    key = str(product_id)
    if key in basket:
        del basket[key]
        db.update_user_basket(user_id, basket)
        await callback.message.answer(f"üóë –£–¥–∞–ª—ë–Ω —Ç–æ–≤–∞—Ä #{product_id}")
    await show_basket_after_edit(callback)
    await callback.answer()


@router.callback_query(F.data == "checkout")
async def checkout_handler(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–∫–∞–∑ –≤ –ë–î –∏ –æ—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É.
    """
    try:
        user_id = callback.from_user.id
        basket = db.get_user_basket(user_id)
        if not basket:
            await callback.message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            return
        product_ids = list(map(int, basket.keys()))
        products = db.get_products_by_ids(product_ids)
        if not products:
            await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        total_price = sum(db.get_product_by_id(pid)[4] * qty for pid, qty in basket.items())
        db.save_order(user_id, basket, total_price)
        db.update_user_basket(user_id, {})
        caption = (
            f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            f"üßÆ –ò—Ç–æ–≥–æ: {total_price} —Ä—É–±.\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!"
        )
        await callback.message.answer(caption)
        await notify_manager_about_order(
            bot=callback.bot,
            user_id=user_id,
            basket=basket,
            total_price=total_price
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"[checkout_handler] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}", exc_info=True)