from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
import keyboard as kb
import db
import logging

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data == "catalog")
async def show_catalog(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Üí –∑–∞–ø—Ä–µ—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø.
    """
    try:
        registered = await db.user_exists(callback.from_user.id)
        if not registered:
            await callback.message.answer("–í—ã –¥–æ–ª–∂–Ω—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–∞–ª–æ–≥—É.")
            await callback.answer()
            return
        categories = db.get_all_categories()
        keyboard = kb.get_catalog_keyboard(categories)
        if not keyboard:
            await callback.message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return
        await callback.message.answer("üõç –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"[show_catalog] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}", exc_info=True)


@router.callback_query(F.data.startswith("category_"))
async def show_subcategories(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ö.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    try:
        category_id = int(callback.data.split("_")[1])
    except (IndexError, ValueError):
        await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        await callback.answer()
        return
    try:
        subcategories = db.get_subcategories_by_category(category_id)
        if not subcategories:
            products = db.get_products_by_category(category_id)
            if not products:
                await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç.")
                return
            keyboard = kb.get_products_keyboard(products)
            await callback.message.answer("üõç –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=keyboard)
            return
        keyboard = kb.get_subcategories_keyboard(subcategories)
        await callback.message.answer("üß© –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"[show_subcategories] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}", exc_info=True)


@router.callback_query(F.data.startswith("subcategory_"))
async def show_products_by_subcategory(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    –í—ã–≤–æ–¥–∏—Ç —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç.
    """
    try:
        subcategory_id = int(callback.data.split("_")[1])
    except (IndexError, ValueError):
        await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        await callback.answer()
        return
    try:
        products = db.get_products_by_subcategory(subcategory_id)
        if not products:
            await callback.message.answer("‚ùå –í —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
            return
        keyboard = kb.get_products_keyboard(products)
        await callback.message.answer("üõç –¢–æ–≤–∞—Ä—ã –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=kb.get_products_keyboard(products))
        await callback.answer()
    except Exception as e:
        logger.error(f"[show_products_by_subcategory] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ç–æ–≤–∞—Ä–æ–≤: {e}", exc_info=True)


@router.callback_query(F.data.startswith("product_"))
async def view_product(callback: CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞.
    –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ ‚Üí –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    try:
        product_id = int(callback.data.split("_")[1])
    except (IndexError, ValueError):
        await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞")
        await callback.answer()
        return
    try:
        product = db.get_product_by_id(product_id)
        if not product:
            await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        pid, name, photo, description, price, category_id, subcategory_id, available = product
        caption = (
            f"<b>{name}</b>\n\n"
            f"{description}\n\n"
            f"üí∞ –¶–µ–Ω–∞: {price} —Ä—É–±.\n"
            f"üì¶ –°—Ç–∞—Ç—É—Å: {'‚úÖ –í –Ω–∞–ª–∏—á–∏–∏' if available else '‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}\n"
            f"ID: {pid}"
        )
        if photo and isinstance(photo, str):
            await callback.message.answer_photo(
                photo=photo,
                caption=caption,
                parse_mode="HTML",
                reply_markup=kb.get_product_detail_keyboard(pid)
            )
        else:
            await callback.message.answer(
                caption,
                parse_mode="HTML",
                reply_markup=kb.get_product_detail_keyboard(pid)
            )
        await callback.answer()
    except Exception as e:
        logger.error(f"[view_product] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ç–æ–≤–∞—Ä–∞ #{product_id}: {e}", exc_info=True)