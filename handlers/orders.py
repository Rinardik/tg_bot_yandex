from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram import Bot
import keyboard as kb
import db
from const import MANAGER_ID

import logging
import json

logger = logging.getLogger(__name__)
router = Router()


async def notify_manager_about_order(bot: Bot, user_id: int, basket: dict, total_price: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ.
    """
    try:
        basket_text = "\n".join([
            f"{db.get_product_by_id(int(pid))[1]} x {qty} —à—Ç. = {db.get_product_by_id(int(pid))[4] * qty} —Ä—É–±."
            for pid, qty in basket.items()
        ])
        message_text = (
            f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}\n\n"
            f"–¢–æ–≤–∞—Ä—ã:\n{basket_text}\n\n"
            f"üßÆ –û–±—â–∞—è —Å—É–º–º–∞: {total_price} —Ä—É–±."
        )
        for manager_id in MANAGER_ID:
            try:
                await bot.send_message(manager_id, message_text, reply_markup=kb.mened)
            except Exception as e:
                logger.error(f"[notify_manager] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_id}: {e}", exc_info=True)
    except Exception as e:
        logger.error(f"[notify_manager_about_order] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)


def format_basket(basket: dict) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞.
    """
    lines = []
    for pid, quantity in basket.items():
        product = db.get_product_by_id(int(pid))
        if product:
            _, name, _, _, price, *_ = product
            lines.append(f"{name} x {quantity} —à—Ç. = {price * quantity} —Ä—É–±.")
    return "\n".join(lines) or "üõí –ü—É—Å—Ç–æ–π –∑–∞–∫–∞–∑"


@router.callback_query(F.data == "view_orders")
async def view_orders(callback: CallbackQuery):
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤.
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–≤–∞—Ä—ã.
    """
    if callback.from_user.id not in MANAGER_ID:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤.")
        await callback.answer()
        return
    try:
        orders = db.get_new_orders()
        if not orders:
            await callback.message.answer("üìã –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
            return
        for order in orders:
            order_id, user_id, basket_json, total_price, created_at = order
            basket = json.loads(basket_json)
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_info = db.get_user_info(user_id)
            name, phone = user_info if user_info else ("–ù–µ —É–∫–∞–∑–∞–Ω", "–ù–µ —É–∫–∞–∑–∞–Ω")
            caption = (
                f"üì¶ –ó–∞–∫–∞–∑ #{order_id}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} ({name})\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"üìÖ –î–∞—Ç–∞: {created_at}\n"
                f"üßÆ –ò—Ç–æ–≥–æ: {total_price} —Ä—É–±.\n"
                f"–¢–æ–≤–∞—Ä—ã:\n{format_basket(basket)}"
            )
            await callback.message.answer(caption, reply_markup=kb.get_order_actions(order_id))
        await callback.answer()
    except Exception as e:
        logger.error(f"[view_orders] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∑–∞–∫–∞–∑–æ–≤: {e}", exc_info=True)
        await callback.message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤.")


@router.callback_query(F.data.startswith("confirm_order_"))
async def confirm_order(callback: CallbackQuery):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–∫–∞–∑ ‚Üí –∏–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ 'confirmed'.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É.
    """
    try:
        order_id = int(callback.data.split("_")[2])
    except (IndexError, ValueError):
        await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return
    try:
        db.update_order_status(order_id, "confirmed")
        order = db.get_order_by_id(order_id)
        if not order:
            await callback.message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        _, user_id, _, _, _ = order
        await callback.bot.send_message(user_id, f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!")
        await callback.message.edit_text(f"–ó–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.", reply_markup=None)
        await callback.answer()
    except Exception as e:
        logger.error(f"[confirm_order] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ #{order_id}: {e}", exc_info=True)
        await callback.message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑.")


@router.callback_query(F.data.startswith("cancel_order_"))
async def cancel_order(callback: CallbackQuery):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–∫–∞–∑ ‚Üí –∏–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ 'cancelled'.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É.
    """
    try:
        order_id = int(callback.data.split("_")[2])
    except (IndexError, ValueError):
        await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return
    try:
        db.update_order_status(order_id, "cancelled")
        order = db.get_order_by_id(order_id)
        if not order:
            await callback.message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        _, user_id, _, _, _ = order
        await callback.bot.send_message(user_id, f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω—ë–Ω.")
        await callback.message.edit_text(f"–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=None)
        await callback.answer()
    except Exception as e:
        logger.error(f"[cancel_order] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞ #{order_id}: {e}", exc_info=True)
        await callback.message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑.")

    
@router.callback_query(F.data.startswith("view_order_"))
async def view_order_details(callback: CallbackQuery):
    """
    –í—ã–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–∫–∞–∑—É –º–µ–Ω–µ–¥–∂–µ—Ä—É.
    """
    if callback.from_user.id not in MANAGER_ID:
        await callback.message.answer("‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã.")
        await callback.answer()
        return
    try:
        order_id = int(callback.data.split("_")[1])
    except (IndexError, ValueError):
        await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.")
        return
    try:
        order = db.get_order_by_id(order_id)
        if not order:
            await callback.message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        _, user_id, basket_json, total_price, status = order
        basket = json.loads(basket_json)
        caption = (
            f"üì¶ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order_id}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–¢–æ–≤–∞—Ä—ã:\n{format_basket(basket)}\n"
            f"üßÆ –°—É–º–º–∞: {total_price} —Ä—É–±."
        )
        await callback.message.answer(caption)
        await callback.answer()
    except Exception as e:
        logger.error(f"[view_order_details] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∑–∞–∫–∞–∑–∞ #{order_id}: {e}", exc_info=True)
        await callback.message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞.")