from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from states import ProductForm, RedactForm, DeleteForm, CategoryForm, SubcategoryForm
import keyboard as kb
import db
from const import MANAGER_ID
import logging
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

logger = logging.getLogger(__name__)
router = Router()

@router.message(F.text == "–ú–µ–Ω–µ–¥–∂–µ—Ä-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–ø–∏—Å–∫–µ ‚Üí –∑–∞–ø—Ä–µ—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø.
    """
    if message.from_user.id not in MANAGER_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
        return
    await message.answer("–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä:", reply_markup=kb.mened)


@router.callback_query(F.data == "admin_add_product")
async def add_product_start(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞.
    """
    if callback.from_user.id not in MANAGER_ID:
        await callback.message.answer("‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã.")
        await callback.answer()
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(ProductForm.category)
    await callback.answer()


@router.message(ProductForm.category)
async def product_set_category(message: Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é.
    """
    if message.from_user.id not in MANAGER_ID:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        await state.clear()
        return
    await state.update_data(category=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
    await state.set_state(ProductForm.subcategory)


@router.message(ProductForm.subcategory)
async def product_set_subcategory(message: Message, state: FSMContext):
    await state.update_data(subcategory=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(ProductForm.name)


@router.message(ProductForm.name, F.text)
async def product_set_name(message: Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ.
    """
    if message.from_user.id not in MANAGER_ID:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        await state.clear()
        return
    await state.update_data(name=message.text)
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(ProductForm.photo)


@router.message(ProductForm.photo, F.photo)
async def product_set_photo(message: Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ.
    """
    if message.from_user.id not in MANAGER_ID:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        await state.clear()
        return
    photo_id = message.photo[-1].file_id
    await state.update_data(photo=photo_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(ProductForm.description)


@router.message(ProductForm.description)
async def product_set_description(message: Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ü–µ–Ω—É.
    """
    if message.from_user.id not in MANAGER_ID:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        await state.clear()
        return
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(ProductForm.price)


@router.message(ProductForm.price)
async def product_set_price(message: Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ü–µ–Ω—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.
    """
    if message.from_user.id not in MANAGER_ID:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        await state.clear()
        return
    price_text = message.text.strip()
    if not price_text.isdigit():
        await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    await state.update_data(price=int(price_text))
    data = await state.get_data()
    category_name = data.get("category")
    category_id = db.get_category_id_by_name(category_name)
    if not category_id:
        await message.answer(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                             f"–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –µ—ë —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä-–ø–∞–Ω–µ–ª—å.")
        return
    subcategory_name = data.get("subcategory")
    subcategory_id = None
    if category_id and subcategory_name:
        subcategory_id = db.get_subcategory_id_by_name(subcategory_name, category_id)
        if not subcategory_id:
            subcategory_id = db.add_subcategory(subcategory_name, category_id)
    db.add_product(
        name=data.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏"),
        description=data.get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"),
        price=data["price"],
        category_id=category_id,
        subcategory_id=subcategory_id,
        photo=data.get("photo")
    )
    await message.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥!", reply_markup=kb.mened)
    await state.clear()


@router.callback_query(F.data == "admin_delete_product")
async def delete_product_prompt(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    """
    if callback.from_user.id not in MANAGER_ID:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤.")
        await callback.answer()
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await callback.message.answer("–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel")
    await state.set_state(DeleteForm.id)
    await callback.answer()


@router.message(DeleteForm.id, F.text.isdigit())
async def delete_product_by_id(message: Message, state: FSMContext):
    """
    –£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –ø–æ ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        product_id = int(message.text.strip())
        conn, cur = db.init_products()
        cur.execute("DELETE FROM products WHERE id = ?", (product_id,))
        conn.commit()
        conn.close()
        if cur.rowcount > 0:
            await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä —Å ID {product_id} —É–¥–∞–ª–µ–Ω.")
        else:
            await message.answer(f"‚ùå –¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"[delete_product_by_id] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}", exc_info=True)
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")
    await state.clear()


@router.callback_query(F.data == "admin_edit_product")
async def edit_product_prompt(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    if callback.from_user.id not in MANAGER_ID:
        await callback.message.answer("‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã.")
        await callback.answer()
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    await state.set_state(RedactForm.product_id)
    await callback.answer()


@router.message(RedactForm.product_id, F.text.isdigit())
async def edit_product_get_id(message: Message, state: FSMContext):
    """
    –í—ã–≤–æ–¥–∏—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    try:
        product_id = int(message.text.strip())
        product = db.get_product_by_id(product_id)
        if not product:
            await message.answer(f"‚ùå –¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        pid, name, photo, description, price, category_id, subcategory_id, available = product
        category_name = db.get_category_name_by_id(category_id) if category_id else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        subcategory_name = db.get_subcategory_name_by_id(subcategory_id) if subcategory_id else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        caption = (
            f"<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ #{pid}</b>\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"–¶–µ–Ω–∞: {price} —Ä—É–±.\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
            f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory_name}\n"
            f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –í –Ω–∞–ª–∏—á–∏–∏' if available else '‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}"
        )
        if photo and isinstance(photo, str):
            await message.answer_photo(
                photo=photo,
                caption=caption,
                parse_mode="HTML",
                reply_markup=kb.edit_product_keyboard(pid)
            )
        else:
            await message.answer(
                caption + "\n\nüì∑ –§–æ—Ç–æ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                parse_mode="HTML",
                reply_markup=kb.edit_product_keyboard(pid)
            )
        await state.update_data(product_id=pid)
        await state.set_state(RedactForm.product_id)
    except Exception as e:
        logger.error(f"[edit_product_get_id] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–∞.")


@router.callback_query(F.data.startswith("edit_product_"))
async def start_editing(callback: CallbackQuery, state: FSMContext):
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω–∞ –∏ —Ç.–¥.)
    """
    if callback.from_user.id not in MANAGER_ID:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        await callback.answer()
        return
    parts = callback.data.split("_")
    if len(parts) < 4 or not parts[3].isdigit():
        await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        await callback.answer()
        return
    action = parts[2]
    product_id = int(parts[3])
    if action == "name":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        await state.set_state(RedactForm.name)
    elif action == "description":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        await state.set_state(RedactForm.description)
    elif action == "price":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:")
        await state.set_state(RedactForm.price)
    elif action == "category":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
        await state.set_state(RedactForm.category)
    elif action == "subcategory":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
        await state.set_state(RedactForm.subcategory)
    elif action == "photo":
        await callback.message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:")
        await state.set_state(RedactForm.photo)
    elif action == "available":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ 0 –∏–ª–∏ 1 –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–ª–∏—á–∏—è:")
        await state.set_state(RedactForm.available)
    else:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        return
    await state.update_data(product_id=product_id)
    await callback.answer()


@router.message(RedactForm.name)
async def edit_product_set_name(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.
    –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É.
    """
    try:
        data = await state.get_data()
        product_id = data["product_id"]
        new_name = message.text.strip()
        db.update_product_name(product_id, new_name)
        await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ #{product_id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_name}'")
        await show_edit_menu(message, state, product_id)
    except Exception as e:
        logger.error(f"[edit_product_set_name] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è: {e}", exc_info=True)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ.")


@router.message(RedactForm.description)
async def edit_product_set_description(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.
    """
    try:
        data = await state.get_data()
        product_id = data["product_id"]
        new_description = message.text.strip()
        db.update_product_description(product_id, new_description)
        await message.answer(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ #{product_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        await show_edit_menu(message, state, product_id)
    except Exception as e:
        logger.error(f"[edit_product_set_description] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {e}", exc_info=True)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.")


@router.message(RedactForm.price, F.text.isdigit())
async def edit_product_set_price(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞.
    """
    try:
        data = await state.get_data()
        product_id = data["product_id"]
        new_price = int(message.text.strip())
        db.update_product_price(product_id, new_price)
        await message.answer(f"‚úÖ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ #{product_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_price} —Ä—É–±.")
        await show_edit_menu(message, state, product_id)
    except Exception as e:
        logger.error(f"[edit_product_set_price] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}", exc_info=True)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É.")


@router.message(RedactForm.category)
async def edit_product_set_category(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞.
    –ï—Å–ª–∏ —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç ‚Üí —Å–æ–∑–¥–∞—ë—Ç –µ—ë.
    """
    try:
        data = await state.get_data()
        product_id = data["product_id"]
        new_category_name = message.text.strip()
        category_id = db.get_category_id_by_name(new_category_name)
        if not category_id:
            db.add_category(new_category_name)
            category_id = db.get_category_id_by_name(new_category_name)
        db.update_product_category(product_id, category_id)
        await message.answer(f"üóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ #{product_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ '{new_category_name}'")
        await show_edit_menu(message, state, product_id)
    except Exception as e:
        logger.error(f"[edit_product_set_category] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}", exc_info=True)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")


@router.message(RedactForm.subcategory)
async def edit_product_set_subcategory(message: Message, state: FSMContext):
    data = await state.get_data()
    product_id = data["product_id"]
    new_subcategory_name = message.text.strip()
    category_id = data.get("category_id") or db.get_product_by_id(product_id)[5]
    subcategory_id = db.get_subcategory_id_by_name(new_subcategory_name, category_id)
    if not subcategory_id:
        subcategory_id = db.add_subcategory(new_subcategory_name, category_id)
    db.update_product_subcategory(product_id, subcategory_id)
    await message.answer(f"üß© –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ #{product_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ '{new_subcategory_name}'")
    await show_edit_menu(message, state, product_id)


@router.message(RedactForm.photo, F.photo)
async def edit_product_set_photo(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.
    """
    try:
        photo_id = message.photo[-1].file_id
        data = await state.get_data()
        product_id = data["product_id"]
        db.update_product_photo(product_id, photo_id)
        await message.answer("‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        await show_edit_menu(message, state, product_id)
    except Exception as e:
        logger.error(f"[edit_product_set_photo] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}", exc_info=True)
        await message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ.")


@router.message(RedactForm.available)
async def edit_product_set_availability(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞ (0 –∏–ª–∏ 1).
    """
    try:
        data = await state.get_data()
        product_id = data["product_id"]
        is_available = message.text.strip()
        if is_available not in ("0", "1"):
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ 0 (–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏) –∏–ª–∏ 1 (–≤ –Ω–∞–ª–∏—á–∏–∏).")
            return
        db.update_product_availability(product_id, int(is_available))
        status_text = "–≤ –Ω–∞–ª–∏—á–∏–∏" if is_available == "1" else "–Ω–µ –≤ –Ω–∞–ª–∏—á–∏–∏"
        await message.answer(f"üì¶ –°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ #{product_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{status_text}'")
        await show_edit_menu(message, state, product_id)
    except Exception as e:
        logger.error(f"[edit_product_set_availability] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}", exc_info=True)
        await message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞–ª–∏—á–∏—è.")


async def show_edit_menu(message: Message, state: FSMContext, product_id: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    try:
        product = db.get_product_by_id(product_id)
        if not product:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        pid, name, photo, description, price, category_id, subcategory_id, available = product
        category_name = db.get_category_name_by_id(category_id) if category_id else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        subcategory_name = db.get_subcategory_name_by_id(subcategory_id) if subcategory_id else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        caption = (
            f"<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ #{pid}</b>\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"üì¶ –°—Ç–∞—Ç—É—Å: {'‚úÖ –í –Ω–∞–ª–∏—á–∏–∏' if available else '‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}\n"
            f"–¶–µ–Ω–∞: {price} —Ä—É–±.\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
            f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory_name}"
        )
        if photo and isinstance(photo, str):
            await message.answer_photo(
                photo=photo,
                caption=caption,
                reply_markup=kb.edit_product_keyboard(pid),
                parse_mode="HTML"
            )
        else:
            await message.answer(
                caption + "\n\nüì∑ –§–æ—Ç–æ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                reply_markup=kb.edit_product_keyboard(pid),
                parse_mode="HTML"
            )
        await state.update_data(product_id=pid)
        await state.set_state(RedactForm.product_id)
    except Exception as e:
        logger.error(f"[show_edit_menu] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞.")


@router.callback_query(F.data == "admin_add_category")
async def add_category_handler(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    if callback.from_user.id not in MANAGER_ID:
        await callback.message.answer("‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        await callback.answer()
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(CategoryForm.name)
    await callback.answer()


@router.message(CategoryForm.name, F.text)
async def save_new_category(message: Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –ë–î.
    –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Üí –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º.
    """
    try:
        name = message.text.strip()
        success = db.add_category(name)
        if success:
            await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        else:
            await message.answer("‚ùå –¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        await state.clear()
    except Exception as e:
        logger.error(f"[save_new_category] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        await state.clear()


@router.callback_query(F.data == "admin_add_subcategory")
async def get_category_for_subcategory(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
    await state.set_state(SubcategoryForm.category_name)
    await callback.answer()


@router.message(SubcategoryForm.category_name, F.text)
async def get_category_for_subcategory(message: Message, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è.
    –ï—Å–ª–∏ –¥–∞ ‚Üí –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    category_name = message.text.strip()
    conn, cur = db.init_products()
    cur.execute("SELECT id FROM categories WHERE name=?", (category_name,))
    category = cur.fetchone()
    conn.close()
    if not category:
        await message.answer(
            f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=kb.get_subcategories())        
        return
    await state.update_data(category_id=category[0])
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(SubcategoryForm.subcategory_name)

 
@router.message(SubcategoryForm.subcategory_name, F.text)
async def save_new_subcategory(message: Message, state: FSMContext):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ä–∞–Ω–µ–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.
    """
    data = await state.get_data()
    category_id = data["category_id"]
    subcategory_name = message.text.strip()
    conn, cur = db.init_products()
    try:
        cur.execute("INSERT INTO subcategories (name, category_id) VALUES (?, ?)",
                    (subcategory_name, category_id))
        conn.commit()
        await message.answer(f"‚úÖ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{subcategory_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é #{category_id}")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é: {e}")
    finally:
        conn.close()
        await state.clear()


@router.callback_query(F.data == "admin_list_products")
async def list_products_handler(callback: CallbackQuery):
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
    """
    products = db.get_all_products()
    if not products:
        await callback.message.answer("üõí –í –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        await callback.answer()
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{p[1]}", callback_data=f"view_product_{p[0]}")] 
        for p in products
    ])
    await callback.message.answer("üõç –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("view_product_"))
async def view_product_handler(callback: CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, —Ç–∞–∫ –∏ –∫–ª–∏–µ–Ω—Ç–æ–º.
    """
    try:
        product_id = int(callback.data.split("_")[2])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")
        return
    product = db.get_product_by_id(product_id)
    if not product:
        await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    pid, name, photo, description, price, category_id, subcategory_id, available = product
    category_name = db.get_category_name_by_id(category_id) if category_id else None
    subcategory_name = db.get_subcategory_name_by_id(subcategory_id) if subcategory_id else None
    category_info = ""
    if category_name:
        category_info += f"\nüóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}"
    if subcategory_name:
        category_info += f"\nüß© –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory_name}"
    caption = (
        f"<b>{name}</b>\n\n{description}\n\n"
        f"üí∞ –¶–µ–Ω–∞: {price} —Ä—É–±."
        f"{category_info}\n\n"
        f"üì¶ –°—Ç–∞—Ç—É—Å: {'‚úÖ –í –Ω–∞–ª–∏—á–∏–∏' if available else '‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}\n"
        f"ID: {pid}"
    )
    if photo and isinstance(photo, str):
        await callback.message.answer_photo(
            photo=photo,
            caption=caption,
            parse_mode="HTML",
            reply_markup=kb.edit_product_keyboard(pid)
        )
    else:
        await callback.message.answer(
            caption,
            parse_mode="HTML",
            reply_markup=kb.edit_product_keyboard(pid)
        )
    await callback.answer()